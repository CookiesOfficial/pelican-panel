name: Tests

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  mysql:
    name: MySQL
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: [8.2, 8.3]
        database: ["mysql:8"]
    services:
      database:
        image: ${{ matrix.database }}
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: testing
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    env:
      APP_ENV: testing
      APP_DEBUG: "false"
      APP_KEY: ThisIsARandomStringForTests12345
      APP_TIMEZONE: UTC
      APP_URL: http://localhost/
      APP_ENVIRONMENT_ONLY: "true"
      CACHE_DRIVER: array
      MAIL_MAILER: array
      SESSION_DRIVER: array
      QUEUE_CONNECTION: sync
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1
      DB_DATABASE: testing
      DB_USERNAME: root
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Get cache directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ matrix.php }}-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: bcmath, curl, gd, mbstring, mysql, openssl, pdo, tokenizer, xml, zip
          tools: composer:v2
          coverage: none

      - name: Install dependencies
        run: composer install --no-interaction --no-suggest --prefer-dist

      - name: Unit tests
        run: vendor/bin/phpunit tests/Unit
        env:
          DB_HOST: UNIT_NO_DB
          SKIP_MIGRATIONS: true

      - name: Integration tests
        run: vendor/bin/phpunit tests/Integration
        env:
          DB_PORT: ${{ job.services.database.ports[3306] }}
          DB_USERNAME: root

  mariadb:
    name: MariaDB
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: [8.2, 8.3]
        database: ["mariadb:10.3", "mariadb:10.11", "mariadb:11.4"]
    services:
      database:
        image: ${{ matrix.database }}
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: testing
        ports:
          - 3306
        options: --health-cmd="mariadb-admin ping || mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    env:
      APP_ENV: testing
      APP_DEBUG: "false"
      APP_KEY: ThisIsARandomStringForTests12345
      APP_TIMEZONE: UTC
      APP_URL: http://localhost/
      APP_ENVIRONMENT_ONLY: "true"
      CACHE_DRIVER: array
      MAIL_MAILER: array
      SESSION_DRIVER: array
      QUEUE_CONNECTION: sync
      DB_CONNECTION: mariadb
      DB_HOST: 127.0.0.1
      DB_DATABASE: testing
      DB_USERNAME: root
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Get cache directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ matrix.php }}-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: bcmath, curl, gd, mbstring, mysql, openssl, pdo, tokenizer, xml, zip
          tools: composer:v2
          coverage: none

      - name: Install dependencies
        run: composer install --no-interaction --no-suggest --prefer-dist

      - name: Unit tests
        run: vendor/bin/phpunit tests/Unit
        env:
          DB_HOST: UNIT_NO_DB
          SKIP_MIGRATIONS: true

      - name: Integration tests
        run: vendor/bin/phpunit tests/Integration
        env:
          DB_PORT: ${{ job.services.database.ports[3306] }}
          DB_USERNAME: root

  sqlite:
    name: SQLite
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: [8.2, 8.3]
    env:
      APP_ENV: testing
      APP_DEBUG: "false"
      APP_KEY: ThisIsARandomStringForTests12345
      APP_TIMEZONE: UTC
      APP_URL: http://localhost/
      APP_ENVIRONMENT_ONLY: "true"
      CACHE_DRIVER: array
      MAIL_MAILER: array
      SESSION_DRIVER: array
      QUEUE_CONNECTION: sync
      DB_CONNECTION: sqlite
      DB_DATABASE: testing.sqlite
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Get cache directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ matrix.php }}-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: bcmath, curl, gd, mbstring, mysql, openssl, pdo, tokenizer, xml, zip
          tools: composer:v2
          coverage: none

      - name: Install dependencies
        run: composer install --no-interaction --no-suggest --prefer-dist

      - name: Create SQLite file
        run: touch database/testing.sqlite

      - name: Unit tests
        run: vendor/bin/phpunit tests/Unit
        env:
          DB_HOST: UNIT_NO_DB
          SKIP_MIGRATIONS: true

      - name: Integration tests
        run: vendor/bin/phpunit tests/Integration

  postgresql:
    name: PostgreSQL
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: [8.2, 8.3]
        database: ["postgres:13", "postgres:14", "postgres:15"]
    services:
      database:
        image: ${{ matrix.database }}
        env:
          POSTGRES_DB: testing
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
        ports:
          - 5432
        options: --health-cmd="pg_isready -U root" --health-interval=10s --health-timeout=5s --health-retries=3
    env:
      APP_ENV: testing
      APP_DEBUG: "false"
      APP_KEY: ThisIsARandomStringForTests12345
      APP_TIMEZONE: UTC
      APP_URL: http://localhost/
      APP_ENVIRONMENT_ONLY: "true"
      CACHE_DRIVER: array
      MAIL_MAILER: array
      SESSION_DRIVER: array
      QUEUE_CONNECTION: sync
      DB_CONNECTION: pgsql
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      DB_DATABASE: testing
      DB_USERNAME: root
      DB_PASSWORD: root
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Get cache directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ matrix.php }}-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: bcmath, curl, gd, mbstring, pgsql, openssl, pdo, tokenizer, xml, zip
          tools: composer:v2
          coverage: none

      - name: Install dependencies
        run: composer install --no-interaction --no-suggest --prefer-dist

      - name: Unit tests
        run: vendor/bin/phpunit tests/Unit
        env:
          DB_HOST: UNIT_NO_DB
          SKIP_MIGRATIONS: true

      - name: Integration tests
        run: vendor/bin/phpunit tests/Integration
        env:
          DB_PORT: ${{ job.services.database.ports[5432] }}
          DB_USERNAME: root
          DB_PASSWORD: root
